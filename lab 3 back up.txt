use tnguyen248_Northwind
go
--conditional drop statement for the replaceEmployee procedure
drop procedure if exists replaceEmployee
go

create procedure replaceEmployee
--integer parameter oldId
@oldId int,
--varchar size 30 parameter newLast
@newLast varchar(30),
--varchar size 30 parameter newFirst
@newFirst varchar(30)
as
	declare @numRows int = 0
	--check if former employee record exists
	--@numRows will have 0 if not exists, 1 if exists. Due to PK 
	--it shouldn't have any other number
	select @numRows = count(*)
	from Employees
	where  EmployeeID = @oldID --fill in the where clause
	if @numRows != 1
	begin
	  print 'Old employee not found'
	  return -1
	end
	--check if new employee is already in db
	declare @newEmployee int
	--populate @newEmployee using the below select statement
	select *
	from Employees e
	where e.FirstName = @newFirst and e.LastName = @newLast
	--store the number of rows returned by the above select
	--using the appropriate system function
	set @numRows = @@ROWCOUNT
	if 
	 @numRows > 1
	begin
	  print 'Too many employees found that match new employee name'
	  return -2
	end
	--start handling transactions now - all update/insert/delete transactions
	--must succeed or fail together
	begin transaction
	if @numRows = 0
	begin
	  --insert record into Employees. Catch any errors and handle appropriately
	  begin try
		insert into Employees (LastName,FirstName )
		values (@newLast, @newFirst)
		--store new employeeid using system function into @newEmployee
		set @newEmployee = @@IDENTITY
	  end try
	  begin catch
		print 'Error inserting new employee ' + Error_Message()
		--handle transaction appropriately
		ROLLBACK
		return -3
	  end catch
	end
	--now we have @newEmployee, so reassign all orders from the terminated
	--employee to the new employee
	begin try
	update Orders
	set EmployeeID = @newEmployee
	where EmployeeID = @oldId
go

select * from Employees
select * from Orders